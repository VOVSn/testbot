services:
  # --- Telegram Bot Service ---
  telegram-bot:
    build: .
    container_name: testbot-app
    env_file:
      - .env
    volumes:
      - ./:/app
    restart: unless-stopped
    depends_on:
      # Bot depends on MongoDB being ready
      - mongo-db

  # --- MongoDB Service ---
  mongo-db:
    image: mongo:6.0
    container_name: testbot-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    healthcheck: # <-- ADD HEALTHCHECK
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet --username ${MONGO_USER} --password ${MONGO_PASS} --authenticationDatabase admin
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give mongo time to start up before first healthcheck

  # mongo-express:
  #   image: mongo-express
  #   container_name: testbot-mongo-express
  #   restart: unless-stopped
  #   ports:
  #     - "8082:8081"
  #   environment:
  #     ME_CONFIG_MONGODB_SERVER: mongo-db
  #     ME_CONFIG_MONGODB_PORT: 27017
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASS}
  #     ME_CONFIG_MONGODB_AUTH_DATABASE: admin
  #     ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
  #     ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS}
  #   depends_on:
  #     mongo-db: # <-- MODIFY DEPENDS_ON
  #       condition: service_healthy # Wait for mongo-db to be healthy

volumes:
  mongo-data:
    driver: local