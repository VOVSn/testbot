# handlers/load_handler.py (Refactored)

import csv
import io
import re
import datetime

from telegram import Update
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler,
    filters
)

from db import get_collection
from logging_config import logger
from utils.db_helpers import get_user_role
from utils.common_helpers import normalize_test_id

# Define states
UPLOAD_TYPE, UPLOAD_FILE = range(2) # UPLOAD_TYPE determines mode

# Allowed file types mapping (can be extended)
FILE_TYPE_MAP = {
    'document': filters.Document.ALL,
    'photo': filters.PHOTO,
    'video': filters.VIDEO,
    'audio': filters.AUDIO,
}
ATTACHMENT_FILTER = (
    filters.Document.ALL | filters.PHOTO | filters.VIDEO | filters.AUDIO
)


async def upload_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Starts the upload conversation (tests or materials)."""
    if not update.effective_user:
        return ConversationHandler.END

    user_id = update.effective_user.id
    username = update.effective_user.username
    logger.info(f"User {user_id} (@{username}) triggered /upload command.")

    # 1. Check permissions
    user_role = await get_user_role(user_id, username)
    if user_role not in ('admin', 'teacher'):
        logger.warning(
            f"User {user_id} ({user_role}) attempted /upload "
            f"without privileges."
        )
        await update.message.reply_text(
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π."
        )
        return ConversationHandler.END

    # 2. Determine mode based on arguments
    if not context.args:
        # --- Mode: Upload Test CSV ---
        context.user_data['upload_mode'] = 'test_csv'
        await update.message.reply_text(
            "‚¨ÜÔ∏è **–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–∞:**\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª CSV —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n"
            "–ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `test<ID>.csv` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `testMath101.csv`).\n"
            "–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;).\n"
            "–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8.\n"
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: `–í–æ–ø—Ä–æ—Å;–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç;–û—Ç–≤–µ—Ç2;–û—Ç–≤–µ—Ç3...`\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return UPLOAD_FILE # Go directly to waiting for the file

    else:
        # --- Mode: Upload Materials ---
        raw_test_id = context.args[0]
        test_id = normalize_test_id(raw_test_id)
        if not test_id:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Å—Ç–∞.")
            return ConversationHandler.END

        # Check if the base test exists
        tests_collection = await get_collection('tests')
        if not await tests_collection.find_one({'test_id': test_id}):
             await update.message.reply_text(
                 f"‚ö†Ô∏è –¢–µ—Å—Ç —Å ID '{test_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. "
                 f"–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é `/upload` (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)."
             )
             return ConversationHandler.END

        context.user_data['upload_mode'] = 'materials'
        context.user_data['test_id'] = test_id
        await update.message.reply_text(
            f"üìé **–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ '{test_id}':**\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ).\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
        )
        return UPLOAD_FILE # Go to waiting for file(s)


async def handle_file_upload(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Handles receiving attachments based on the upload mode."""
    if not update.effective_user or not update.message:
        return ConversationHandler.END # Should not happen with MessageHandler

    user_id = update.effective_user.id
    username = update.effective_user.username
    upload_mode = context.user_data.get('upload_mode')

    # Determine file type and get file object
    file_type = None
    file = None
    file_name = "unknown_file"
    tg_file_id = None

    if update.message.document:
        file_type = 'document'
        file = update.message.document
        file_name = file.file_name or f"{file_type}_{file.file_unique_id}.dat"
    elif update.message.photo:
        file_type = 'photo'
        file = update.message.photo[-1] # Highest resolution
        file_name = f"{file_type}_{file.file_unique_id}.jpg"
    elif update.message.video:
        file_type = 'video'
        file = update.message.video
        file_name = file.file_name or f"{file_type}_{file.file_unique_id}.mp4"
    elif update.message.audio:
        file_type = 'audio'
        file = update.message.audio
        file_name = file.file_name or f"{file_type}_{file.file_unique_id}.mp3"

    if not file_type or not file:
        logger.warning(f"Could not determine file type for upload from user {user_id}.")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return UPLOAD_FILE # Stay in state

    tg_file_id = file.file_id
    logger.info(f"User {user_id} uploaded {file_type} '{file_name}' (ID: {tg_file_id}) in mode '{upload_mode}'.")

    # --- Process based on Mode ---
    if upload_mode == 'test_csv':
        return await _handle_test_csv_upload(update, context, file_name, tg_file_id, user_id)
    elif upload_mode == 'materials':
        return await _handle_material_upload(update, context, file_name, tg_file_id, file_type, user_id)
    else:
        logger.error(f"Invalid upload_mode '{upload_mode}' in user_data for user {user_id}.")
        await update.message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /upload.")
        return ConversationHandler.END


async def _handle_test_csv_upload(update: Update, context: ContextTypes.DEFAULT_TYPE, file_name: str, tg_file_id: str, user_id: int) -> int:
    """Processes an uploaded CSV file intended as a test bank."""
    # 1. Validate filename format
    match = re.match(r'^test.*\.csv$', file_name, re.IGNORECASE)
    if not match:
        await update.message.reply_text(
            "‚õî –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å `test<ID>.csv` (–Ω–∞–ø—Ä–∏–º–µ—Ä, testMath101.csv).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ /cancel."
        )
        return UPLOAD_FILE # Remain waiting for a correct file

    # Extract raw ID (part after 'test' and before '.csv')
    raw_test_id_match = re.search(r'^test(.*)\.csv$', file_name, re.IGNORECASE)
    if not raw_test_id_match or not raw_test_id_match.group(1):
         await update.message.reply_text(
             "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ `test<ID>.csv`.\n"
             "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, test_FINAL.csv)."
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ /cancel."
         )
         return UPLOAD_FILE

    raw_test_id = raw_test_id_match.group(1)
    test_id = normalize_test_id(raw_test_id) # Normalize the extracted ID

    if not test_id:
         await update.message.reply_text("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–µ—Å—Ç–∞, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.")
         return UPLOAD_FILE

    logger.info(f"Processing CSV upload for test_id '{test_id}' from file '{file_name}'.")

    questions_data = []
    try:
        file_obj = await context.bot.get_file(tg_file_id)
        csv_bytes = io.BytesIO()
        await file_obj.download_to_memory(csv_bytes)
        csv_bytes.seek(0)
        try:
            csv_text = csv_bytes.read().decode('utf-8')
        except UnicodeDecodeError:
            logger.warning(f"CSV file '{file_name}' for test '{test_id}' is not UTF-8 encoded.")
            await update.message.reply_text(
                "‚õî –û—à–∏–±–∫–∞: –§–∞–π–ª CSV –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ UTF-8 –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ /cancel."
            )
            return UPLOAD_FILE

        csv_reader = csv.reader(io.StringIO(csv_text), delimiter=';')
        line_num = 0
        for row in csv_reader:
            line_num += 1
            if not row or not row[0].strip():
                continue
            
            # Expecting: Question;CorrectAnswerText;Opt1;Opt2;Opt3;Opt4
            if len(row) < 3: # Must have at least Question, CorrectAnswerText, and one Option
                logger.warning(f"Skipping invalid row {line_num} in test '{test_id}' CSV (not enough columns): {row}")
                await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {line_num} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫).")
                continue

            question_text = row[0].strip()
            correct_answer_text = row[1].strip() # The textual value of the correct answer
            
            # The actual options to present to the user are from column 2 onwards (index 2)
            # Filter out empty strings that might result from trailing semicolons
            actual_options = [opt.strip() for opt in row[2:] if opt.strip()] 

            if not question_text:
                logger.warning(f"Skipping row {line_num} in test '{test_id}' CSV: Empty question text.")
                await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {line_num} (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞).")
                continue
            
            if not correct_answer_text:
                logger.warning(f"Skipping row {line_num} in test '{test_id}' CSV: Empty correct answer text.")
                await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {line_num} (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞).")
                continue

            if not actual_options:
                logger.warning(f"Skipping row {line_num} in test '{test_id}' CSV: No options provided.")
                await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {line_num} (–Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞).")
                continue

            # Find the index of the correct_answer_text within the actual_options
            try:
                # Ensure case-sensitive match, or convert both to lower for case-insensitive
                # For simplicity, let's assume case-sensitive as per typical test requirements
                correct_option_idx = actual_options.index(correct_answer_text)
            except ValueError:
                logger.warning(
                    f"Skipping row {line_num} in test '{test_id}' CSV: Correct answer text "
                    f"'{correct_answer_text}' not found in the provided options {actual_options}."
                )
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í —Å—Ç—Ä–æ–∫–µ {line_num} —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ "
                    f"'{correct_answer_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
                )
                continue
            
            # Ensure a specific number of options if required, e.g., exactly 4
            # For now, we'll use whatever is provided in actual_options.
            # Example: If you require exactly 4 options:
            # if len(actual_options) != 4:
            #     logger.warning(f"Skipping row {line_num}: Expected 4 options, got {len(actual_options)}")
            #     await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°—Ç—Ä–æ–∫–∞ {line_num} –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.")
            #     continue


            questions_data.append({
                'question_text': question_text,
                'options': actual_options, # These are now [Opt1, Opt2, CorrectAnswer, Opt3] or similar
                'correct_option_index': correct_option_idx # Index of correct_answer_text in actual_options
            })

        if not questions_data:
            logger.warning(f"No valid questions found in CSV for test '{test_id}'.")
            await update.message.reply_text(
                "‚õî –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ CSV —Ñ–∞–π–ª–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ /cancel."
            )
            return UPLOAD_FILE

    except Exception as e:
        logger.exception(f"Error processing CSV for test '{test_id}': {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
        return ConversationHandler.END

    # 3. Update Database (Upsert)
    try:
        tests_collection = await get_collection('tests')
        utc_now = datetime.datetime.now(datetime.timezone.utc)

        # Data that always gets updated or set
        set_data = {
            'questions': questions_data,
            'total_questions': len(questions_data),
            'uploaded_by_user_id': user_id,
            'upload_timestamp': utc_now,
            # Consider adding title update here if desired, e.g., based on ID
            'title': f"–¢–µ—Å—Ç {test_id}" # Default title
        }
        # Data that only gets set when inserting a new document
        set_on_insert_data = {
            'test_id': test_id,
            # Add 'date_created': utc_now here if needed
        }

        update_result = await tests_collection.update_one(
            {'test_id': test_id},
            {
                '$set': set_data,
                '$setOnInsert': set_on_insert_data
            },
            upsert=True
        )

        if update_result.upserted_id:
            logger.info(f"Successfully created test '{test_id}' with {len(questions_data)} questions by user {user_id}.")
            await update.message.reply_text(
                f"‚úÖ –¢–µ—Å—Ç '{test_id}' ({len(questions_data)} –≤–æ–ø—Ä.) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
            )
        elif update_result.modified_count:
             logger.info(f"Successfully updated test '{test_id}' with {len(questions_data)} questions by user {user_id}.")
             await update.message.reply_text(
                 f"‚úÖ –¢–µ—Å—Ç '{test_id}' ({len(questions_data)} –≤–æ–ø—Ä.) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
             )
        else:
             # This case (matched but not modified) might mean the content was identical
             logger.info(f"Test '{test_id}' data submitted by user {user_id} was identical to existing data.")
             await update.message.reply_text(
                 f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞ '{test_id}' –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å."
             )

        return ConversationHandler.END # End conversation after successful CSV upload

    except Exception as e:
        logger.exception(f"Database error upserting test '{test_id}': {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END


async def _handle_material_upload(update: Update, context: ContextTypes.DEFAULT_TYPE, file_name: str, tg_file_id: str, file_type: str, user_id: int) -> int:
    """Processes an uploaded file as material for a test."""
    test_id = context.user_data.get('test_id')
    if not test_id:
        logger.error(f"Missing test_id in user_data during material upload for user {user_id}.")
        await update.message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ID —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å `/upload <ID>`.")
        return ConversationHandler.END

    # Insert material metadata into DB
    try:
        materials_collection = await get_collection('materials')
        material_doc = {
            'test_id': test_id,
            'telegram_file_id': tg_file_id,
            'file_name': file_name,
            'file_type': file_type,
            'uploaded_by_user_id': user_id,
            'upload_timestamp': datetime.datetime.now(datetime.timezone.utc)
        }
        await materials_collection.insert_one(material_doc)

        logger.info(f"Successfully saved material '{file_name}' for test '{test_id}' by user {user_id}.")
        await update.message.reply_text(
            f"‚úÖ –§–∞–π–ª '{file_name}' –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ—Å—Ç—É '{test_id}'.\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ /cancel –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return UPLOAD_FILE # Stay in state to receive more files

    except Exception as e:
        logger.exception(f"Database error saving material for test '{test_id}': {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{file_name}' –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
            "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel."
        )
        return UPLOAD_FILE # Stay in state, allow retry or cancel


async def cancel_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancels the upload operation."""
    user_id = update.effective_user.id if update.effective_user else 'Unknown'
    mode = context.user_data.get('upload_mode', 'unknown')
    logger.info(f"User {user_id} canceled the /upload operation (mode: {mode}).")
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    # Clear user_data specific to this conversation
    context.user_data.pop('upload_mode', None)
    context.user_data.pop('test_id', None)
    return ConversationHandler.END


# Rename the main handler variable
upload_command_handler = ConversationHandler(
    entry_points=[CommandHandler('upload', upload_command)],
    states={
        UPLOAD_FILE: [
            MessageHandler(ATTACHMENT_FILTER, handle_file_upload),
            # Could add specific message if user sends text instead of file
            MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: u.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ /cancel.")),
        ],
        # No need for UPLOAD_TYPE state if entry point decides mode
    },
    fallbacks=[CommandHandler('cancel', cancel_upload)],
    # Optional: Add conversation timeout
    # conversation_timeout=60*10 # 10 minutes
)